%{
#include <string>
#include "Parser.h" /* Parser file generated by Bison */

extern int yylineno;
void yyerror(const char* s, ...);
%}

%option noyywrap nodefault yylineno

digs [0-9]+
id [a-z|A-Z]+[a-z|A-Z|_|0-9]*

%%

[ \t]               ; /* Spaces and tabs are ignored */

"int" 		        {return T_TYPE_INT;} /* Type integer */

{id}	            {yylval.id = new char[yyleng+1]; strcpy(yylval.id, yytext); return T_ID;} /* Identifier */
{digs}              {yylval.value = std::atoi(yytext); return T_INT;} /* Integer number */

"+"                 {return T_PLUS;} /* Binary operator PLUS */
"-"                 {return T_MINUS;} /* Binary/unary operator MINUS */
\*                  {return T_TIMES;} /* Binary operator TIMES */
"/"                 {return T_DIVIDE;} /* Binary operator DIVIDE */
"="                 {return T_ATT;} /* Binary operator ASSIGN */

","                 {return T_COMMA;} /* Comma */
"("                 {return T_OPEN_PAR;} /* Open parenthesis */
")"                 {return T_CLOSING_PAR;} /* Closing parenthesis */
\n                  {return T_NL;} /* New line */

.                   {yyerror("Unknown token! %c\n", *yytext);} /* Every other character produces a lexical error */

%%

void yyerror(const char *s, ...) {
    va_list ap;
    va_start(ap, s);
    std::fprintf(stderr, "Line %d: error: ", yylineno);
    std::vfprintf(stderr, s, ap);
}
